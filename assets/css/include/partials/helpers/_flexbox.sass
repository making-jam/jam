// Number of columns & columns widths used in grid.
$column-numbers: 12
$column-width: 100% / $column-numbers

// Generates classses for columns 1 - 12.
@for $i from 1 through $column-numbers
	.columns-#{$i}
		width: $i * $column-width
		padding: 0 $base-unit-layout // Column gutters. Using padding as margin doens't work with % based widths.

// For same-width block layouts (e.g. widgets), use the below instead of columns.
// Columns won't work if a background colour is set, as no spacing will appear in between them
// due to padding.

@for $i from 1 through $column-numbers
	.flex-grid-#{$i}
		flex-wrap: wrap
		> .flex-item
			width: 100% / $i
			padding: 0 $base-unit-layout // Column gutters. Using padding as margin doens't work with % based widths.
			margin-bottom: $base-unit-layout

// Creates a flex container. Negatives margins added to align child elements to side of container.
.flex-container,
.container-flex,
.flex-row,
[class^="flex-grid"]
	display: flex
	margin-left: -($base-unit-layout)
	margin-right: -($base-unit-layout)

	&.gutter-half
		margin-left: -($half-unit-layout)
		margin-right: -($half-unit-layout)
		> [class^="column"]
			padding: 0 $half-unit-layout !important

		> .flex-item
			padding: 0 $half-unit-layout !important

	&.full-bleed
		margin-left: 0 !important
		margin-right: 0 !important
		> [class^="column"]
			padding: 0 !important

	// Other Helpers
	&.vertical
		height: 100vh
		flex-direction: column
		> [class^="column"]
			flex: 1

// Moves an item to the right of the screen.
.align-right
	align-self: flex-end
	margin-left: auto !important

.flex
	display: flex

	&.column
		flex-direction: column

	&.row
		flex-direction: row

	&.center-vertically
		align-items: center

	&.center-horizontally
		justify-content: center

@for $i from 1 through $column-numbers
	.flex-#{$i}
		flex: $i